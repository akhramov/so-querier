(ns stackoverflow-stats.stackoverflow-api
  (:require
   [clojure.string :refer [join]]
   [clojure.core.async :as async]
   [clj-http.client :as client]))

(def ^:private parallelism-factor 10)

(def ^:private base-url "https://api.stackexchange.com/2.2/search")
(def ^:private default-params
  {:pagesize 100
   :order "desc"
   :sort "creation"
   :site "stackoverflow"
   ;; Filter generated by API site to return exactly needed fields.
   :filter "!-MOiNm40F1UCMppfm-Cw1GbkyWQfaEFb5"})

(defn- get-params
  "Returns search request query params.

  StackExchange API supports multiple tags per requests, but, per requirements,
  we ought to make multiple requests, so this function will accept exactly 1
  tag."
  [tags]
  (conj default-params {:tagged (join ";" tags)}))

(defn- get-stats
  "Appends statistics to raw API response."
  [answers]
  {:total (count answers)
   :answered (->> answers
                 (filter (comp not :is_answered))
                 (count))
   :items answers})

(defmulti get-tagged-questions "Returns questions tagged by tag" class)

(defn pipeline
  [collection]
  (let [output-chan (async/chan)
        input-chan (async/to-chan collection)]
    (async/pipeline-blocking parallelism-factor
                             output-chan
                             (map get-tagged-questions)
                             input-chan)
    output-chan))

(defmethod get-tagged-questions String
  [tag]
  (->> {:query-params (get-params [tag]) :as :json}
     (client/get base-url)
     ((comp :items :body))
     (get-stats)
     (hash-map (keyword tag))))

(defmethod get-tagged-questions clojure.lang.PersistentVector
  [tags]
  (->> tags
       (pipeline)
       (async/reduce conj {})
       (async/<!!)))
